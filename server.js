// Generated by CoffeeScript 1.3.1
(function() {
  var app, connection, count, data, express, getAllData, getLastData, io, mysql, sys,
    _this = this;

  express = require('express');

  io = require('socket.io');

  app = module.exports = express.createServer();

  app.configure(function() {
    app.set('views', __dirname + '/views');
    app.set('view engine', 'jade');
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(require('stylus').middleware({
      src: __dirname + '/public'
    }));
    app.use(app.router);
    return app.use(express["static"](__dirname + '/public'));
  });

  app.configure('development', function() {
    return app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
  });

  app.configure('production', function() {
    return app.use(express.errorHandler());
  });

  io = require('socket.io').listen(app);

  count = 6;

  data = [];

  sys = require('util');

  mysql = require('mysql');

  connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'password',
    database: 'pep'
  });

  connection.connect();

  this.inserts = function(connection, pcId, date, cpu) {
    var _this = this;
    return connection.query('insert into data (pc, dat, cpu ) values (?, ?, ?)', [pcId, date, cpu], function(err, rows, fields) {
      if (err) {
        throw err;
      }
      return console.log("inserted " + rows.insertId);
    });
  };

  setInterval((function() {
    return _this.inserts(connection, 'pc1', new Date(), Math.random());
  }), 10000);

  getLastData = function(connection, pcId, callback) {
    var _this = this;
    console.log("querying for last insert");
    return connection.query('SELECT m.* from data m where m.pc=? and m.dat=(select max(dat) from data m2 where m2.pc=?)', [pcId, pcId], function(err, rows, fields) {
      if (err) {
        throw err;
      }
      return callback(rows);
    });
  };

  getAllData = function(connection, pcId, callback) {
    console.log("querying for all data");
    return connection.query('SELECT m.* from data m where m.pc=? order by dat asc', [pcId], function(err, rows, fields) {
      if (err) {
        throw err;
      }
      return callback(rows);
    });
  };

  this.getAllDataWrapper = function(connection, pcId) {
    return getAllData(connection, pcId, function(result) {
      var item, _i, _len;
      for (_i = 0, _len = result.length; _i < _len; _i++) {
        item = result[_i];
        if (io != null) {
          io.sockets.emit('chart', {
            chartData: item
          });
        }
      }
      return setInterval((function() {
        return _this.getLastDataWrapper(connection, 'pc1');
      }), 10000);
    });
  };

  this.getLastDataWrapper = function(connection, pcId) {
    return getLastData(connection, pcId, function(result) {
      var item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = result.length; _i < _len; _i++) {
        item = result[_i];
        _results.push(io != null ? io.sockets.emit('chart', {
          chartData: item
        }) : void 0);
      }
      return _results;
    });
  };

  io.sockets.on('connection', function(socket) {
    var mys;
    mys = mysql.createConnection({
      host: 'localhost',
      user: 'root',
      password: 'password',
      database: 'pep'
    });
    mys.connect();
    _this.getAllDataWrapper(mys, 'pc1');
    return socket.on('disconnect', function() {});
  });

  app.get('/', function(req, res) {
    return res.render('index', {
      title: 'node.js express socket.io realtime charts'
    });
  });

  if (!module.parent) {
    app.listen(10927);
    console.log("Express server listening on port %d", app.address().port);
  }

}).call(this);
